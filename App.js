import React, { PureComponent } from 'react'import { Image, TouchableOpacity, View, Text } from 'react-native'import { createStore } from 'redux'import { Provider } from 'react-redux'import { DrawerNavigator, StackNavigator } from 'react-navigation'import { NEWS, LOGIN, NEWS_DETAILS, LOGOUT } from './src/constants/navigation'import {  HomeScreen,  NewDetailsScreen,  LoginScreen,  LogoutScreen} from './src/screens'import AppReducer from './src/redux/reducers'import styles from './src/styles/styles'const AppNavigation = StackNavigator({  [LOGIN]: {    screen: LoginScreen,    navigationOptions: {      header: false,      drawerLockMode: 'locked-closed'    }  },  [NEWS]: {    screen: HomeScreen,    navigationOptions: {      title: 'Home'    }  },  [NEWS_DETAILS]: {    screen: NewDetailsScreen,    navigationOptions: {      title: false    }  }}, {  initialRouteName: LOGIN,  headerMode: 'screen',  navigationOptions: props => {    return {      headerLeft: <HeaderRight {...props} />,      headerRight: <Image style={styles.headerLogo} source={require(        './assets/logo-green.png')} />,      headerTitleStyle: { color: '#999' }      // gesturesEnabled: false    }  }})class HeaderRight extends PureComponent {  handleBack = () => {    this.props.navigation.goBack()  }  handleOpenMenu = () => {    this.props.navigation.navigate('DrawerOpen')  }  get isNewsScreen () {    return this.props.navigation.state.routeName === NEWS  }  render () {    return (      <View style={styles.leftButtons}>        <TouchableOpacity onPress={this.handleOpenMenu}>          <Image            style={styles.menuBtn}            source={require('./assets/hamburger.png')}          />        </TouchableOpacity>        {!this.isNewsScreen ? (          <TouchableOpacity onPress={this.handleBack}>            <Text style={styles.backBtn}>Back</Text>          </TouchableOpacity>        ) : null        }      </View>    )  }}const Drawer = DrawerNavigator({  Drawer: { screen: AppNavigation },  [LOGOUT]: {    screen: LogoutScreen,    navigationOptions: {      title: 'Logout'    }  }})class App extends PureComponent {  store = createStore(AppReducer)  render () {    return (      <Provider store={this.store}>        <Drawer />      </Provider>    )  }}export default App